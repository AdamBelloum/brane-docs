{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"brane-docs","text":"<p>this repo is mean to create a documentation for brane</p>"},{"location":"admin-guide/","title":"Administration &amp; Operations Guide","text":"<p>Last updated: October 2025 Audience: System engineers and infrastructure administrators Purpose: Describe how to manage Brane nodes, configure environments, and maintain distributed Brane systems.  </p>"},{"location":"admin-guide/#1-understanding-node-types","title":"1. Understanding Node Types","text":"<p>Brane runs as a distributed orchestration system, composed of three types of nodes that collaborate securely.  </p> Node Type Purpose Main Components Typical Host Control Node Central coordinator; manages workflows, package registry, and policies <code>brane-api</code>, <code>brane-planner</code>, <code>brane-registry</code>, <code>brane-driver</code>, <code>aux-scylla</code> Central server Worker Node Executes workflow tasks and packages <code>brane-worker</code>, <code>brane-driver</code> Compute node or cluster node Proxy Node Bridges isolated or cross-domain networks between sites <code>brane-proxy</code> Gateway or DMZ host <p>Each node communicates securely using certificates and configuration files.  </p>"},{"location":"admin-guide/#2-generating-configuration-files","title":"2. Generating Configuration Files","text":"<p>Brane uses YAML configuration files to define infrastructure, nodes, backends, and proxies. All of these are generated using the <code>branectl</code> CLI.</p> <p>Use the <code>-f</code> flag to force overwriting existing files, and <code>-p &lt;path&gt;</code> to specify output directories.</p>"},{"location":"admin-guide/#infrayml","title":"<code>infra.yml</code>","text":"<p>Describes the overall infrastructure (which nodes exist and how they connect).</p> <pre><code>branectl generate infra -f -p ./config/infra.yml \\\n  amy:amy-worker-node.com bob:bob-worker-node.com\n</code></pre> <p>Example output snippet:</p> <pre><code>locations:\n  amy:\n    host: amy-worker-node.com\n  bob:\n    host: bob-worker-node.com\n</code></pre>"},{"location":"admin-guide/#nodeyml","title":"<code>node.yml</code>","text":"<p>Defines the configuration of a specific node (control, worker, or proxy).</p>"},{"location":"admin-guide/#control-node","title":"Control node:","text":"<pre><code>branectl generate node -f central central.example.com\n</code></pre>"},{"location":"admin-guide/#worker-node","title":"Worker node:","text":"<pre><code>branectl generate node -f worker central.example.com amy\n</code></pre> <p>Example structure:</p> <pre><code>node:\n  name: amy\n  kind: worker\n  control_plane: central.example.com\n</code></pre>"},{"location":"admin-guide/#backendyml","title":"<code>backend.yml</code>","text":"<p>Defines the compute backend for a worker node. Usually \u00d2local\u00d3 for on-machine Docker execution.</p> <pre><code>branectl generate backend -f -p ./config/backend.yml local\n</code></pre> <p>Example:</p> <pre><code>backend:\n  kind: local\n</code></pre>"},{"location":"admin-guide/#proxyyml","title":"<code>proxy.yml</code>","text":"<p>Defines proxy configuration for cross-site communication.</p> <pre><code>branectl generate proxy -f -p ./config/proxy.yml\n</code></pre> <p>Example:</p> <pre><code>proxy:\n  host: proxy.example.com\n  port: 50051\n</code></pre>"},{"location":"admin-guide/#3-managing-certificates","title":"3. Managing Certificates","text":"<p>Each Brane node must have valid TLS certificates for secure communication. Use <code>branectl</code> to generate and distribute them.</p>"},{"location":"admin-guide/#generate-server-certificates","title":"Generate server certificates:","text":"<pre><code>branectl generate certs -f -p ./config/certs server &lt;LOCATION_ID&gt; -H &lt;HOSTNAME&gt;\n</code></pre> <p>Example:</p> <pre><code>branectl generate certs -f -p ./config/certs server amy -H amy-worker-node.com\n</code></pre> <p>This command creates a directory:</p> <pre><code>config/certs/\n |--- ca.pem\n |--- cert.pem\n |--- key.pem\n</code></pre>"},{"location":"admin-guide/#distribute-certificates","title":"Distribute certificates","text":"<ul> <li>Copy each worker node\u00d5s CA certificate to the control node under:</li> </ul> <p><code>config/certs/&lt;worker&gt;/ca.pem</code> * Keep private keys secure. Do not share <code>key.pem</code>.</p>"},{"location":"admin-guide/#4-managing-policies-and-access-control","title":"4. Managing Policies and Access Control","text":"<p>Brane integrates with policy databases to control data access, security, and computation boundaries. These policies are typically expressed in eFLINT and managed locally per node.</p>"},{"location":"admin-guide/#generate-a-policy-database","title":"Generate a Policy Database","text":"<pre><code>branectl generate policy_db -f -p ./config/policies.db\n</code></pre>"},{"location":"admin-guide/#generate-policy-secrets-deliberation-and-expert","title":"Generate Policy Secrets (Deliberation and Expert)","text":"<pre><code>branectl generate policy_secret -f -p ./config/policy_deliberation_secret.json\nbranectl generate policy_secret -f -p ./config/policy_expert_secret.json\n</code></pre>"},{"location":"admin-guide/#generate-policy-token-for-authorization","title":"Generate Policy Token (For Authorization)","text":"<pre><code>branectl generate policy_token -f -p ./config/policy_token.json\n</code></pre> <p>These tokens authenticate and authorize actions performed by different roles in Brane\u00d5s policy framework.</p>"},{"location":"admin-guide/#5-starting-and-monitoring-nodes","title":"5. Starting and Monitoring Nodes","text":"<p>After configuration, use <code>branectl start</code> to launch nodes. All services run as Docker containers managed by Brane.</p>"},{"location":"admin-guide/#start-control-node","title":"Start Control Node","text":"<pre><code>branectl start central\n</code></pre>"},{"location":"admin-guide/#start-worker-node","title":"Start Worker Node","text":"<pre><code>branectl start worker\n</code></pre>"},{"location":"admin-guide/#start-proxy-node","title":"Start Proxy Node","text":"<pre><code>branectl start proxy\n</code></pre>"},{"location":"admin-guide/#check-running-containers","title":"Check Running Containers","text":"<pre><code>docker ps\n</code></pre> <p>You should see containers such as:</p> <pre><code>brane-api\nbrane-planner\nbrane-registry\nbrane-driver\nbrane-proxy\naux-scylla\n</code></pre> <p>All should report Status: Up.</p>"},{"location":"admin-guide/#monitor-logs","title":"Monitor Logs","text":"<p>View logs for a specific component:</p> <pre><code>docker logs brane-api\n</code></pre> <p>Tail logs live:</p> <pre><code>docker logs -f brane-api\n</code></pre>"},{"location":"admin-guide/#stop-or-restart-nodes","title":"Stop or Restart Nodes","text":"<pre><code>branectl stop central\nbranectl restart worker\n</code></pre>"},{"location":"admin-guide/#6-operational-verification","title":"6. Operational Verification","text":""},{"location":"admin-guide/#check-node-registration","title":"Check Node Registration","text":"<pre><code>brane instance list\n</code></pre> <p>Expected output example:</p> <pre><code>NAME        TYPE      STATUS\ncentral     control   ACTIVE\namy         worker    ACTIVE\nbob         worker    ACTIVE\n</code></pre>"},{"location":"admin-guide/#verify-communication","title":"Verify Communication","text":"<p>On the control node:</p> <pre><code>brane ping amy\n</code></pre> <p>If successful, the control node can communicate securely with the worker node.</p>"},{"location":"admin-guide/#7-maintenance-tips","title":"7. Maintenance Tips","text":"<ul> <li>Back up configuration files (<code>infra.yml</code>, <code>node.yml</code>, and certs).</li> <li>Rotate certificates periodically using <code>branectl generate certs</code>.</li> <li>Clean unused containers to reclaim space:</li> </ul> <p><code>bash   docker system prune -f</code> * Keep Brane binaries updated:</p> <p><code>bash   branectl self-update</code></p>"},{"location":"admin-guide/#summary","title":"Summary","text":"Task Command Purpose Generate infra config <code>branectl generate infra</code> Define overall topology Create node configs <code>branectl generate node</code> Configure control/worker/proxy Generate certs <code>branectl generate certs</code> Secure node communication Manage policies <code>branectl generate policy_*</code> Set access control and secrets Start nodes <code>branectl start &lt;type&gt;</code> Run Brane components Check system <code>brane instance list</code> Verify active nodes <p>With these operations, your Brane deployment is secure, connected, and ready for distributed workflows.</p> <p>Continue with the [Configuration &amp; Reference Manual ?] (reference-manual.md)</p> <p>? Back to Table of Contents</p>"},{"location":"brane-docs-index/","title":"Brane Documentation","text":"<p>Welcome to the Brane documentation set. Select a guide below to get started.</p>"},{"location":"brane-docs-index/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Brane Overview &amp; Getting Started</li> <li>Installation &amp; Setup Guide</li> <li>Developer Guide - Building &amp; Registering Packages</li> <li>BraneScript User Guide</li> <li>Administration &amp; Operations Guide</li> <li>TODO: Configuration &amp; Reference Manual</li> <li>TODO: Conceptual &amp; Architecture Guide</li> <li>Tutorials &amp; Examples</li> </ol>"},{"location":"brane-docs-index/#extras","title":"Extras","text":"<ol> <li>Brane - core concepts - a not so short introduction to brane </li> <li> <p>Slides</p> </li> <li> <p>Brane intro</p> <p>   Your browser does not support the video tag.   </p> </li> </ol> <p>Use the Back to Contents link at the top of each page to return here.</p>"},{"location":"branescript-guide/","title":"BraneScript User Guide","text":"<p>Last updated: October 2025 Audience: Scientists, data analysts, or anyone composing workflows Purpose: Learn how to use BraneScript to define, run, and explore workflows in Brane.  </p>"},{"location":"branescript-guide/#1-introduction-to-branescript","title":"1. Introduction to BraneScript","text":"<p>BraneScript is a simple, domain-specific language (DSL) for defining workflows in Brane. It allows you to compose, connect, and orchestrate functions from different Brane packages into complete data processing pipelines.</p>"},{"location":"branescript-guide/#key-features","title":"Key Features","text":"<ul> <li>Intuitive syntax similar to modern scripting languages  </li> <li>Portable across Brane deployments (local or distributed)  </li> <li>Supports variables, function calls, control flow, and data passing </li> <li>Integrates directly with Brane packages and datasets  </li> </ul> <p>BraneScript files use the <code>.bs</code> extension and are executed with the <code>brane</code> CLI.</p>"},{"location":"branescript-guide/#2-branescript-basics","title":"2. BraneScript Basics","text":"<p>A minimal BraneScript program looks like this:</p> <pre><code>// hello.bs\nimport hello_world;\n\nprintln(hello_world::say_hello());\n</code></pre>"},{"location":"branescript-guide/#syntax-essentials","title":"Syntax Essentials","text":"Element Description Example Import Load a package or module <code>import hello_world;</code> Function call Execute a package function <code>hello_world::say_hello();</code> Assignment Store output of a function <code>msg = hello_world::greet(\"Ada\");</code> Print Display values <code>println(msg);</code> Comments Start with <code>//</code> <code>// This is a comment</code>"},{"location":"branescript-guide/#example-with-data-flow","title":"Example with Data Flow","text":"<pre><code>import math_ops;\nimport text_utils;\n\na = 5;\nb = 3;\nsum = math_ops::add(a, b);\nmsg = text_utils::to_string(sum);\n\nprintln(\"The result is: \" + msg);\n</code></pre>"},{"location":"branescript-guide/#3-importing-packages-and-calling-functions","title":"3. Importing Packages and Calling Functions","text":"<p>Each package defines a set of functions (or operations). You import the package and call its functions using the <code>package::function()</code> syntax.</p>"},{"location":"branescript-guide/#example","title":"Example","text":"<pre><code>import hello_world;\n\nprintln(hello_world::say_hello());\n</code></pre> <p>If a function takes parameters:</p> <pre><code>import hello_world;\n\nmessage = hello_world::greet(\"Ada\");\nprintln(message);\n</code></pre> <p>If it produces structured outputs:</p> <pre><code>result = data_analysis::compute_average(dataset);\nprintln(result.mean);\n</code></pre> <p>Tip: Use <code>brane packages list</code> to view all available packages.</p>"},{"location":"branescript-guide/#4-running-scripts-locally-or-remotely","title":"4. Running Scripts Locally or Remotely","text":"<p>You can execute BraneScript workflows using the <code>brane</code> CLI.</p>"},{"location":"branescript-guide/#run-locally","title":"Run Locally","text":"<pre><code>brane workflow run hello.bs\n</code></pre> <p>Brane compiles your script, resolves the required packages, and executes all steps on your local instance.</p>"},{"location":"branescript-guide/#run-on-a-distributed-setup","title":"Run on a Distributed Setup","text":"<p>If your Brane installation includes remote worker nodes, simply run the same command \u00d1 Brane automatically orchestrates execution across the available infrastructure.</p> <pre><code>brane workflow run hello.bs\n</code></pre> <p>To view available instances:</p> <pre><code>brane instance list\n</code></pre> <p>To select a specific environment:</p> <pre><code>brane workflow run hello.bs --instance &lt;instance_name&gt;\n</code></pre>"},{"location":"branescript-guide/#5-using-the-interactive-repl","title":"5. Using the Interactive REPL","text":"<p>Brane provides a REPL (Read\u00d0Eval\u00d0Print Loop) to experiment with BraneScript interactively.</p> <p>Start the REPL:</p> <pre><code>brane workflow repl\n</code></pre> <p>You will see:</p> <pre><code>Welcome to the BraneScript REPL!\nType :help for assistance.\n</code></pre>"},{"location":"branescript-guide/#example-session","title":"Example Session","text":"<pre><code>&gt;&gt;&gt; import hello_world;\n&gt;&gt;&gt; println(hello_world::say_hello());\nHello, world!\n</code></pre> <p>Exit with:</p> <pre><code>:quit\n</code></pre> <p>The REPL is great for quick exploration \u00d1 testing functions, learning syntax, or debugging.</p>"},{"location":"branescript-guide/#6-example-ohelloworldo-workflow","title":"6. Example: \u00d2HelloWorld\u00d3 Workflow","text":"<p>Here\u00d5s a complete BraneScript example you can try right away.</p> <p>Create a file <code>HelloWorld.bs</code>:</p> <pre><code>// HelloWorld.bs\n// Demonstrates calling a package function and printing output\n\nimport hello_world;\n\nprintln(hello_world::say_hello());\n</code></pre> <p>Run it:</p> <pre><code>brane workflow run HelloWorld.bs\n</code></pre> <p>Expected output:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"branescript-guide/#example-with-variables-and-composition","title":"Example with Variables and Composition","text":"<pre><code>import hello_world;\nimport text_utils;\n\n// Call a package function\nmsg = hello_world::greet(\"Ada\");\n\n// Manipulate the string\nupper_msg = text_utils::to_upper(msg);\n\n// Display the result\nprintln(upper_msg);\n</code></pre>"},{"location":"branescript-guide/#7-understanding-execution-flow","title":"7. Understanding Execution Flow","text":"<p>When you run a BraneScript:</p> <ol> <li>The script is parsed and validated.</li> <li>Brane identifies the required packages and their locations.</li> <li>Tasks are distributed to nodes (local or remote).</li> <li>Each function runs inside a secure container.</li> <li>Outputs are collected and made available for subsequent steps.</li> </ol> <p>You can inspect logs or workflow results using:</p> <pre><code>brane workflow list\nbrane workflow logs &lt;workflow_id&gt;\n</code></pre>"},{"location":"branescript-guide/#summary","title":"Summary","text":"Task Command Purpose Run a script <code>brane workflow run &lt;file&gt;.bs</code> Execute workflow locally or remotely Use REPL <code>brane workflow repl</code> Try commands interactively Import package <code>import &lt;package&gt;;</code> Access package functions Call function <code>&lt;package&gt;::&lt;function&gt;(args)</code> Execute package code Print output <code>println()</code> Display workflow results <p>BraneScript lets you automate complex data workflows in a simple, reproducible way. Next, learn how to Administer and Manage Brane Nodes ?</p> <p>? Back to Table of Contents</p>"},{"location":"developer-guide/","title":"Developer Guide -  Building \\&amp; Registering Brane Packages","text":"<p>Last updated: October 2025 Audience: Software engineers creating custom Brane functions Purpose: Learn how to wrap your code into reusable Brane packages and register them in Brane.  </p>"},{"location":"developer-guide/#1-overview","title":"1. Overview","text":"<p>A Brane package is a portable containerized unit that wraps any code (e.g., Python, R, shell) and exposes it to the Brane ecosystem as a callable function. Packages allow reusability, language independence, and safe execution in local or distributed environments.</p> <p>When you create a Brane package, you: 1. Write your function code 2. Describe it using metadata (<code>container.yml</code>, <code>data.yml</code>) 3. Build it into a container with the Brane CLI 4. Register (push) it so others can use it in BraneScript workflows  </p>"},{"location":"developer-guide/#2-package-basics","title":"2. Package Basics","text":"<p>A Brane package contains:</p> <pre><code>my_package/\n|---- container.yml    Function definitions and metadata\n|---- data.yml         (Optional) Data types used by the package\n|---- code/            Source code directory\n|  |---- main.py       (Optional) dependencies\n|---- requirements.txt (Optional) dependencies  \n</code></pre> <p><code>container.yml</code></p> <p>Defines what functions your package exposes and how to run them.</p> <p>Example:</p> <pre><code>name: hello_world\nversion: 1.0.0\nlanguage: python\nfunctions:\n  say_hello:\n    command: python3 main.py\n    description: \"Prints a friendly message\" \n</code></pre> <p>data.yml (Optional) Defines custom data types exchanged between packages.</p> <p>Example:</p> <pre><code>types:\n  Message:\n    fields:\n      content: string\n</code></pre>"},{"location":"developer-guide/#3-creating-your-first-brane-function","title":"3. Creating Your First Brane Function","text":""},{"location":"developer-guide/#step-1-create-a-new-package-skeleton","title":"Step 1  -  Create a New Package Skeleton","text":"<p>Use the brane CLI to generate a template:</p> <pre><code>brane new hello_world\ncd hello_world\nThis creates the following structure:\n</code></pre> <pre><code>hello_world/\n |---- container.yml\n |---- data.yml\n |----  code/\n</code></pre>"},{"location":"developer-guide/#step-2-add-your-function-code","title":"Step 2  - Add Your Function Code","text":"<p>Create a Python script in the code/ directory, for example main.py:</p> <pre><code># code/main.py\ndef say_hello():\n    print(\"Hello, world!\")\n</code></pre>"},{"location":"developer-guide/#step-3-define-the-interface","title":"Step 3 - Define the Interface","text":"<p>Edit the generated container.yml file:</p> <pre><code>name: hello_world\nversion: 1.0.0\nlanguage: python\nfunctions:\n  say_hello:\n    command: python3 code/main.py\n    description: \"Prints a simple Hello, world! message\"\n</code></pre> <p>If your function requires arguments, you can specify them:</p> <pre><code>functions:\n  greet:\n    command: python3 code/greet.py\n    inputs:\n      name: string\n    output: string\n</code></pre> <p>Example Python code:</p> <pre><code># code/greet.py\nimport sys\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nif __name__ == \"__main__\":\n    name = sys.argv[1]\n    print(greet(name))\n</code></pre>"},{"location":"developer-guide/#4-building-the-package","title":"4. Building the Package","text":"<p>Once your files are ready, build the package into a container:</p> <pre><code>brane build\n</code></pre> <p>Brane will:</p> <p>Create a Docker image for your package</p> <p>Validate your metadata</p> <p>Store the resulting .tar artifact under .brane/</p> <p>You can inspect the result:</p> <pre><code>brane inspect hello_world:1.0.0\n</code></pre>"},{"location":"developer-guide/#5-pushing-registering-the-package","title":"5. Pushing (Registering) the Package","text":"<p>To make your package available in your local or shared Brane registry:</p> <pre><code>brane push\n</code></pre> <p>This uploads the built package to the Brane registry so it can be imported in workflows.</p> <p>Check it is available:</p> <pre><code>brane packages list\n</code></pre> <p>You should see:</p> <pre><code>\nNAME          VERSION   OWNER\nhello_world   1.0.0     local\n</code></pre>"},{"location":"developer-guide/#6-testing-locally","title":"6. Testing Locally","text":"<p>You can test your function without writing a BraneScript yet.</p> <p>Run your package directly:</p> <pre><code>\nbrane run hello_world:say_hello\n</code></pre> <p>Expected output:</p> <pre><code>Hello, world!\n</code></pre> <p>If the package takes input arguments:</p> <pre><code>brane run hello_world:greet --input name=\"Ada\"\nOutput:\n</code></pre> <p>Hello, Ada!</p>"},{"location":"developer-guide/#7-using-the-package-in-a-workflow","title":"7. Using the Package in a Workflow","text":"<p>Once registered, import and use it in a BraneScript workflow.</p> <p>Create a file hello.bs:</p> <pre><code>import hello_world;\n\nprintln(hello_world::say_hello());\n</code></pre> <p>Run the workflow:</p> <pre><code>brane workflow run hello.bs\n</code></pre>"},{"location":"developer-guide/#8-tips-best-practices","title":"8. Tips  \\&amp; Best Practices","text":"<p>Version your packages - increment the version every time you modify code or interfaces.   Keep metadata simple -  avoid unnecessary dependencies.   Use consistent naming - package names should match their primary function.   Document functions - use description fields for discoverability.   Test locally before pushing to shared registries.</p>"},{"location":"developer-guide/#summary","title":"Summary","text":""},{"location":"developer-guide/#step-command-purpose","title":"Step    Command Purpose","text":"Create package brane new  Generate skeleton Edit metadata container.yml, data.yml Define interfaces and functions Build package brane build Create container image Push package brane push Register package in registry Run or test brane run Verify function output Use in workflow brane workflow run Integrate in BraneScript <p>You have now created, built, and registered your first Brane package!</p> <p>Next steps:</p> <p>Learn BraneScript  </p> <p>Run HelloWorld workflows   </p> <p>? Back to Table of Contents</p>"},{"location":"getting-started/","title":"Brane Overview &amp; Getting Started","text":"<p>Last updated: October 2025 Audience: New users, educators, and evaluators Prerequisites: Basic familiarity with command-line tools and Docker  </p>"},{"location":"getting-started/#1-what-is-brane","title":"1. What Is Brane?","text":"<p>Brane is a programmable orchestration framework that simplifies how data-intensive applications are executed across different computing environments \u00e2   from a single laptop to distributed infrastructures.</p> <p>It helps scientists, engineers, and system administrators build, deploy, and execute workflows using lightweight, reusable building blocks called Brane packages. These packages wrap any code (Python, R, shell scripts, etc.) into portable, executable units.</p>"},{"location":"getting-started/#key-idea","title":"Key Idea","text":"<p>Brane abstracts away technical complexity (containers, data transfers, security policies) so that users can:</p> <ul> <li>Compose workflows in an intuitive scripting language called BraneScript </li> <li>Package their code once and run it anywhere  </li> <li>Execute across multiple sites securely and transparently  </li> </ul>"},{"location":"getting-started/#core-architecture-simplified","title":"Core Architecture (Simplified)","text":"<p>At its core, Brane consists of:</p> <ul> <li>Control Node \u00e2  central coordinator  </li> <li>Worker Nodes \u00e2   execute computations  </li> <li>Proxy Nodes (optional) \u00e2  bridge networks between sites  </li> </ul> <p>All nodes communicate through secure channels and coordinate tasks via the Brane runtime.</p>"},{"location":"getting-started/#2-roles-in-brane","title":"2. Roles in Brane","text":"<p>Brane supports several types of users, each with distinct goals and tools.</p> Role Description Main Tool(s) Typical Tasks Scientist / End User Composes and runs workflows using existing functions <code>brane</code> CLI Write BraneScripts, run experiments Software Engineer / Developer Wraps existing code as reusable Brane packages <code>brane</code> CLI Create, build, and publish packages System Administrator Installs and manages Brane infrastructure <code>branectl</code> CLI Deploy and monitor nodes (control, worker, proxy)"},{"location":"getting-started/#3-key-components-and-tools","title":"3. Key Components and Tools","text":""},{"location":"getting-started/#brane","title":"<code>brane</code>","text":"<p>The user-facing command-line tool for:</p> <ul> <li>Creating and building Brane packages  </li> <li>Running and testing workflows  </li> <li>Managing datasets and registries  </li> </ul> <p>Example:</p> <pre><code>brane build\nbrane run helloworld\n</code></pre>"},{"location":"getting-started/#branectl","title":"<code>branectl</code>","text":"<p>The administrative command-line tool for:</p> <ul> <li>Installing and configuring nodes</li> <li>Generating configuration and certificate files</li> <li>Starting Brane services (control, worker, proxy)</li> </ul> <p>Example:</p> <pre><code>branectl download services central -f\nbranectl start central\n</code></pre> <p>Together, these two tools allow users and administrators to operate the full Brane ecosystem.</p>"},{"location":"getting-started/#4-your-first-workflow-helloworld","title":"4. Your First Workflow HelloWorld","text":"<p>This short tutorial guides you through running your first Brane workflow locally. It demonstrates the end-to-end flow: package creation workflow execution.</p>"},{"location":"getting-started/#step-1-verify-installation","title":"Step 1. Verify Installation","text":"<p>Ensure Brane CLI is installed:</p> <pre><code>brane --version\n</code></pre> <p>If not installed, follow the instructions in the Installation &amp; Setup Guide.</p>"},{"location":"getting-started/#step-2-create-a-simple-package","title":"Step 2. Create a Simple Package","text":"<p>Initialize a new Brane package:</p> <pre><code>brane new helloworld\ncd helloworld\n</code></pre> <p>Create a simple Python script:</p> <pre><code># helloworld.py\ndef hello_world():\n    return \"Hello, world!\"\n</code></pre> <p>Edit the <code>container.yml</code> file to describe your package:</p> <pre><code>name: hello_world\nversion: 1.0.0\nfunctions:\n  hello_world:\n    command: python3 helloworld.py\n</code></pre>"},{"location":"getting-started/#step-3-build-and-register-the-package","title":"Step 3. Build and Register the Package","text":"<pre><code>brane build\nbrane push\n</code></pre> <p>This compiles your code into a containerized Brane package and makes it available for use.</p>"},{"location":"getting-started/#step-4-create-a-workflow-script","title":"Step 4. Create a Workflow Script","text":"<p>Create a new file called <code>HelloWorld.bs</code>:</p> <pre><code>// HelloWorld.bs\n// A simple workflow that prints \"Hello, world!\"\n\nimport hello_world;\n\nprintln(hello_world());\n</code></pre>"},{"location":"getting-started/#step-5-run-the-workflow","title":"Step 5. Run the Workflow","text":"<p>Execute the workflow locally:</p> <pre><code>brane workflow run HelloWorld.bs\n</code></pre> <p>Expected output:</p> <pre><code>Hello, world!\n</code></pre> <p>You have successfully run your first Brane workflow!</p>"},{"location":"getting-started/#step-6-try-the-interactive-repl-optional","title":"Step 6. Try the Interactive REPL (Optional)","text":"<p>Instead of writing a file, you can experiment interactively:</p> <pre><code>brane workflow repl\n</code></pre> <p>Then type:</p> <pre><code>import hello_world;\nprintln(hello_world());\n</code></pre>"},{"location":"getting-started/#5-whats-next","title":"5. What's Next?","text":"<p>Now that you have completed your first workflow, you can:</p> <ul> <li>Create more complex packages see Developer Guide</li> <li>Compose multi-step workflows see BraneScript User Guide</li> <li>Deploy Brane on multiple nodes see Installation &amp; Setup Guide</li> <li>Explore Brane's architecture see Conceptual &amp; Architecture Guide</li> </ul>"},{"location":"getting-started/#summary","title":"Summary","text":"You Learned You Can Now What Brane is and how its structured Understand roles and components How to use the Brane CLI tools Install, build, and run packages How to run your first workflow Execute a HelloWorld in BraneScript <p>Brane empowers you to focus on science and data logic \u00e2  not on infrastructure details.</p> <p>Continue with the Developer Guide or ? Back to Table of Contents</p> <p>TODO: generate a front-matter block (YAML metadata for docs frameworks like MkDocs or Docusaurus) so it can be integrated into documentation site navigation automatically?</p>"},{"location":"installation/","title":"Brane Installation &amp; Setup Guide","text":"<p>Last updated: October 2025 Audience: System administrators, developers testing locally Purpose: Explain how to install Brane for both local (single node) and distributed (multi-node) environments.  </p>"},{"location":"installation/#1-prerequisites","title":"1. Prerequisites","text":"<p>Before installing Brane, ensure your system meets the following requirements.</p>"},{"location":"installation/#runtime-dependencies","title":"Runtime Dependencies","text":"Component Description Installation Notes Docker Runs Brane services as containers Docker Install Docs Docker BuildKit Builds container images efficiently Included in modern Docker releases; enable with <code>docker buildx create --use</code> OpenSSL Required by Brane command-line tools macOS: <code>brew install openssl</code>Ubuntu/Debian: <code>sudo apt install openssl</code> GLIBC \u00b3 2.27 Needed for precompiled binaries Check with <code>ldd --version</code> <p>Tip: On Linux, add your user to the Docker group to avoid using <code>sudo</code>: <code>bash sudo usermod -aG docker \"$USER\"</code> Then log out and log back in.</p>"},{"location":"installation/#2-installing-branectl","title":"2. Installing <code>branectl</code>","text":"<p><code>branectl</code> is the administration CLI used to install, configure, and manage Brane nodes.</p>"},{"location":"installation/#macos-intel","title":"macOS (Intel)","text":"<pre><code>sudo wget -O /usr/local/bin/branectl \\\n  https://github.com/BraneFramework/brane/releases/download/nightly/brane-macos-x86_64\n</code></pre>"},{"location":"installation/#macos-apple-silicon","title":"macOS (Apple Silicon)","text":"<pre><code>sudo wget -O /usr/local/bin/branectl \\\n  https://github.com/BraneFramework/brane/releases/download/nightly/brane-macos-aarch64\n</code></pre>"},{"location":"installation/#linux-x86-64","title":"Linux (x86-64)","text":"<pre><code>sudo wget -O /usr/local/bin/branectl \\\n  https://github.com/BraneFramework/brane/releases/download/nightly/brane-linux-x86_64\n</code></pre> <p>Make it executable:</p> <pre><code>sudo chmod +x /usr/local/bin/branectl\n</code></pre> <p>Verify installation:</p> <pre><code>branectl --help\n</code></pre> <p>If you see usage instructions, the tool is installed correctly.</p>"},{"location":"installation/#3-installing-brane-on-a-single-node-local-test","title":"3. Installing Brane on a Single Node (Local Test)","text":"<p>A local installation is ideal for learning, prototyping, or testing workflows.</p>"},{"location":"installation/#step-1-download-brane-service-images","title":"Step 1 - Download Brane Service Images","text":"<pre><code>branectl download services central -f\nbranectl download services auxillary -f\n</code></pre>"},{"location":"installation/#step-2-generate-default-configurations","title":"Step 2 - Generate Default Configurations","text":"<pre><code>branectl generate proxy -f -p ./config/proxy.yml\nbranectl generate node -f central localhost\n</code></pre> <p>This creates configuration files under <code>./config/</code> and <code>node.yml</code> in the current directory.</p>"},{"location":"installation/#step-3-start-the-local-instance","title":"Step 3 - Start the Local Instance","text":"<pre><code>branectl start central\n</code></pre> <p>Note: The ScyllaDB database container may take up to a minute to become fully available. Use <code>watch docker ps</code> to monitor the container status.</p> <p>Once all containers (including <code>brane-api</code>) are running, Brane is ready for use.</p>"},{"location":"installation/#4-installing-a-multi-node-brane-cluster","title":"4. Installing a Multi-Node Brane Cluster","text":"<p>A distributed setup typically includes:</p> <ul> <li>Control Node - orchestrates workflows</li> <li>Worker Nodes - execute computations</li> <li>Proxy Nodes (optional) - handle cross-site network communication</li> </ul>"},{"location":"installation/#step-1-prepare-each-machine","title":"Step 1 - Prepare Each Machine","text":"<p>Install the prerequisites and <code>branectl</code> on all machines that will host Brane nodes.</p>"},{"location":"installation/#step-2-create-certificates-for-secure-communication","title":"Step 2 - Create Certificates for Secure Communication","text":"<p>On each node:</p> <pre><code>branectl generate certs -f -p ./config/certs server &lt;LOCATION_ID&gt; -H &lt;HOSTNAME&gt;\n</code></pre> <p>Example:</p> <pre><code>branectl generate certs -f -p ./config/certs server amy -H amy-worker-node.com\n</code></pre> <p>Copy each node\u00d5s <code>ca.pem</code> file to the control node under <code>config/certs/&lt;node&gt;/ca.pem</code>.</p>"},{"location":"installation/#step-3-set-up-the-control-node","title":"Step 3 - Set Up the Control Node","text":"<p>Generate the infrastructure and proxy configuration:</p> <pre><code>branectl generate infra -f -p ./config/infra.yml amy:amy-worker-node.com bob:192.0.2.2\nbranectl generate proxy -f -p ./config/proxy.yml\nbranectl generate node -f central central.example.com\n</code></pre> <p>Start the control node:</p> <pre><code>branectl start central\n</code></pre>"},{"location":"installation/#step-4-set-up-each-worker-node","title":"Step 4 - Set Up Each Worker Node","text":"<p>On each worker node:</p> <pre><code>branectl download services worker -f\nbranectl generate backend -f -p ./config/backend.yml local\nbranectl generate proxy -f -p ./config/proxy.yml\nbranectl generate policy_secret -f -p ./config/policy_deliberation_secret.json\nbranectl generate policy_secret -f -p ./config/policy_expert_secret.json\nbranectl generate policy_db -f -p ./policies.db\nbranectl generate node -f worker &lt;CENTRAL_HOSTNAME&gt; &lt;LOCATION_ID&gt;\n</code></pre> <p>Example:</p> <pre><code>branectl generate node -f worker central.example.com bob\n</code></pre> <p>Start the worker node:</p> <pre><code>branectl start worker\n</code></pre>"},{"location":"installation/#step-5-optional-deploy-a-proxy-node","title":"Step 5 - Optional: Deploy a Proxy Node","text":"<p>If needed for cross-domain communication:</p> <pre><code>branectl download services proxy -f\nbranectl generate proxy -f -p ./config/proxy.yml\nbranectl generate node -f proxy proxy.example.com\nbranectl start proxy\n</code></pre>"},{"location":"installation/#5-verifying-the-deployment","title":"5. Verifying the Deployment","text":""},{"location":"installation/#check-running-containers","title":"Check Running Containers","text":"<pre><code>docker ps\n</code></pre> <p>You should see containers for:</p> <ul> <li><code>brane-api</code></li> <li><code>brane-driver</code></li> <li><code>brane-planner</code></li> <li><code>brane-registry</code></li> <li><code>brane-proxy</code></li> <li><code>aux-scylla</code> (database)</li> </ul> <p>All should have a Status: Up.</p>"},{"location":"installation/#check-logs","title":"Check Logs","text":"<p>To view logs of a specific service:</p> <pre><code>docker logs &lt;container_name&gt;\n</code></pre> <p>Example:</p> <pre><code>docker logs brane-api\n</code></pre>"},{"location":"installation/#verify-cli-connection","title":"Verify CLI Connection","text":"<p>Run:</p> <pre><code>brane instance list\n</code></pre> <p>If your nodes appear, the setup is complete.</p>"},{"location":"installation/#summary","title":"Summary","text":"Step Action Outcome 1 Install dependencies Docker and OpenSSL installed 2 Install <code>branectl</code> CLI verified with <code>branectl --help</code> 3 Run local instance Single-node Brane up and running 4 Configure multi-node Control, worker, and proxy connected 5 Verify setup Containers active and reachable <p>Brane is now installed and operational. You can proceed to Build Your First Package ? or Run Your First Workflow ? or ? Back to Table of Contents</p>"},{"location":"tutorials/","title":"Tutorials &amp; Examples","text":"<p>Last updated: October 2025 Audience: Beginners, educators, new contributors Purpose: Guided, hands-on examples to learn Brane through practical exercises.  </p>"},{"location":"tutorials/#overview","title":"Overview","text":"<p>This section contains short, progressive tutorials designed to help you get comfortable with Brane. You will learn how to:</p> <ol> <li>Run a simple HelloWorld workflow locally  </li> <li>Deploy Brane on a small cluster  </li> <li>Create and register your own Brane function  </li> <li>Compose a multi-step workflow using BraneScript </li> <li>(Preview) Add a data policy with eFLINT </li> </ol> <p>Each tutorial assumes you have installed Brane using the Installation &amp; Setup Guide.</p>"},{"location":"tutorials/#tutorial-1-run-helloworld-locally","title":"Tutorial 1 - Run HelloWorld Locally","text":""},{"location":"tutorials/#objective","title":"Objective","text":"<p>Run your first Brane workflow on a single machine.</p>"},{"location":"tutorials/#prerequisites","title":"Prerequisites","text":"<ul> <li>Brane installed and running locally (<code>branectl start central</code>)</li> <li>Docker running</li> <li><code>brane</code> CLI accessible from your terminal</li> </ul>"},{"location":"tutorials/#step-1-verify-setup","title":"Step 1 - Verify Setup","text":"<pre><code>brane --version\n````\n\nCheck that the Brane API is active:\n\n```bash\ndocker ps | grep brane-api\n</code></pre>"},{"location":"tutorials/#step-2-create-a-simple-package","title":"Step 2 - Create a Simple Package","text":"<pre><code>brane new helloworld\ncd helloworld\n</code></pre> <p>Edit <code>code/main.py</code>:</p> <pre><code>def say_hello():\n    print(\"Hello, world!\")\n</code></pre> <p>Update <code>container.yml</code>:</p> <pre><code>name: hello_world\nversion: 1.0.0\nlanguage: python\nfunctions:\n  say_hello:\n    command: python3 code/main.py\n</code></pre>"},{"location":"tutorials/#step-3-build-and-push","title":"Step 3  - Build and Push","text":"<pre><code>brane build\nbrane push\n</code></pre>"},{"location":"tutorials/#step-4-run-a-workflow","title":"Step 4 - Run a Workflow","text":"<p>Create <code>HelloWorld.bs</code>:</p> <pre><code>import hello_world;\nprintln(hello_world::say_hello());\n</code></pre> <p>Run it:</p> <pre><code>brane workflow run HelloWorld.bs\n</code></pre> <p>Output:</p> <pre><code>Hello, world!\n</code></pre> <p>Congratulations - you have run your first Brane workflow locally!</p>"},{"location":"tutorials/#tutorial-2-deploy-brane-on-a-small-cluster","title":"Tutorial 2 - Deploy Brane on a Small Cluster","text":""},{"location":"tutorials/#objective_1","title":"Objective","text":"<p>Set up Brane on multiple machines and run a distributed workflow.</p>"},{"location":"tutorials/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Two or more machines with Docker and <code>branectl</code> installed</li> <li>SSH access between nodes</li> <li>Basic understanding of YAML configuration files</li> </ul>"},{"location":"tutorials/#step-1-define-the-infrastructure","title":"Step 1 - Define the Infrastructure","text":"<p>On the control node:</p> <pre><code>branectl generate infra -f -p ./config/infra.yml control:control.local worker:worker.local\n</code></pre>"},{"location":"tutorials/#step-2-generate-certificates","title":"Step 2 - Generate Certificates","text":"<p>On each node:</p> <pre><code>branectl generate certs -f -p ./config/certs server &lt;LOCATION_ID&gt; -H &lt;HOSTNAME&gt;\n</code></pre> <p>Example (worker node):</p> <pre><code>branectl generate certs -f -p ./config/certs server worker -H worker.local\n</code></pre> <p>Copy each node\u00d5s <code>ca.pem</code> to the control node under:</p> <pre><code>config/certs/&lt;node&gt;/ca.pem\n</code></pre>"},{"location":"tutorials/#step-3-configure-nodes","title":"Step 3 - Configure Nodes","text":"<p>Control Node:</p> <pre><code>branectl generate node -f central control.local\nbranectl start central\n</code></pre> <p>Worker Node:</p> <pre><code>branectl generate node -f worker control.local worker\nbranectl start worker\n</code></pre>"},{"location":"tutorials/#step-4-verify-cluster","title":"Step 4 - Verify Cluster","text":"<p>On the control node:</p> <pre><code>brane instance list\n</code></pre> <p>Expected output:</p> <pre><code>NAME        TYPE      STATUS\ncontrol     control   ACTIVE\nworker      worker    ACTIVE\n</code></pre> <p>Now you can run the HelloWorld workflow remotely - Brane will dispatch it to your worker node automatically.</p>"},{"location":"tutorials/#tutorial-3-create-and-register-your-own-function","title":"Tutorial 3 - Create and Register Your Own Function","text":""},{"location":"tutorials/#objective_2","title":"Objective","text":"<p>Wrap your own code as a Brane function and use it in workflows.</p>"},{"location":"tutorials/#step-1-initialize","title":"Step 1 -  Initialize","text":"<pre><code>brane new greetings\ncd greetings\n</code></pre>"},{"location":"tutorials/#step-2-add-function-code","title":"Step 2 - Add Function Code","text":"<pre><code># code/greet.py\nimport sys\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nif __name__ == \"__main__\":\n    print(greet(sys.argv[1]))\n</code></pre>"},{"location":"tutorials/#step-3-define-metadata","title":"Step 3 - Define Metadata","text":"<p>Edit <code>container.yml</code>:</p> <pre><code>name: greetings\nversion: 1.0.0\nlanguage: python\nfunctions:\n  greet:\n    command: python3 code/greet.py\n    inputs:\n      name: string\n    output: string\n</code></pre>"},{"location":"tutorials/#step-4-build-and-push","title":"Step 4 - Build and Push","text":"<pre><code>brane build\nbrane push\n</code></pre>"},{"location":"tutorials/#step-5-use-it-in-branescript","title":"Step 5  -  Use It in BraneScript","text":"<pre><code>import greetings;\n\nmsg = greetings::greet(\"Ada\");\nprintln(msg);\n</code></pre> <p>Run it:</p> <pre><code>brane workflow run greet_test.bs\n</code></pre> <p>Output:</p> <pre><code>Hello, Ada!\n</code></pre>"},{"location":"tutorials/#tutorial-4-compose-a-multi-step-workflow-in-branescript","title":"Tutorial 4 - Compose a Multi-Step Workflow in BraneScript","text":""},{"location":"tutorials/#objective_3","title":"Objective","text":"<p>Combine multiple packages in a workflow.</p>"},{"location":"tutorials/#example-scenario","title":"Example Scenario","text":"<p>We\u00d5ll chain two operations:</p> <ol> <li>Generate a message with <code>greetings</code></li> <li>Convert it to uppercase with <code>text_utils</code></li> </ol>"},{"location":"tutorials/#step-1-create-the-script","title":"Step 1 - Create the Script","text":"<pre><code>import greetings;\nimport text_utils;\n\nmsg = greetings::greet(\"Marie\");\nupper = text_utils::to_upper(msg);\n\nprintln(upper);\n</code></pre>"},{"location":"tutorials/#step-2-run-it","title":"Step 2 - Run It","text":"<pre><code>brane workflow run multi_step.bs\n</code></pre> <p>Expected output:</p> <pre><code>HELLO, MARIE!\n</code></pre>"},{"location":"tutorials/#step-3-n-visualize-workflow-execution","title":"Step 3 \u00d1 Visualize Workflow Execution","text":"<p>List executed workflows:</p> <pre><code>brane workflow list\n</code></pre> <p>Inspect logs for details:</p> <pre><code>brane workflow logs &lt;workflow_id&gt;\n</code></pre>"},{"location":"tutorials/#tutorial-5-add-a-data-policy-using-eflint-coming-soon","title":"Tutorial 5  -  Add a Data Policy using eFLINT (Coming Soon)","text":""},{"location":"tutorials/#objective_4","title":"Objective","text":"<p>Learn how to attach and enforce data-sharing policies to Brane workflows.</p>"},{"location":"tutorials/#planned-content","title":"Planned Content","text":"<ul> <li>Define a policy in eFLINT format</li> <li>Attach it to a workflow or dataset</li> <li>Control where data can be processed</li> <li>Monitor compliance in distributed runs</li> </ul> <p>This feature will be integrated in future versions of Brane\u00d5s policy framework. Check for updates in the Release Notes.</p>"},{"location":"tutorials/#summary","title":"Summary","text":"Tutorial Key Skill Gained 1. Run HelloWorld Locally Install and test Brane 2. Deploy Small Cluster Set up distributed Brane 3. Create Your Own Function Wrap custom code as a package 4. Multi-Step Workflow Compose packages in BraneScript 5. Add Data Policy (Preview) Secure data execution with eFLINT"},{"location":"tutorials/#next-steps","title":"Next Steps","text":"<ul> <li>Explore BraneScript User Guide to deepen your scripting knowledge.</li> <li>Review Administration &amp; Operations Guide for managing deployments.</li> <li>Visit Configuration &amp; Reference Manual for detailed CLI and YAML options.</li> </ul> <p>? Back to Table of Contents</p>"}]}